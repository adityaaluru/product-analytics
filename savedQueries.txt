OPTIONAL MATCH (n)-[r]-(m) RETURN n,r,m LIMIT 2000


OPTIONAL MATCH (n:Category)-[r]-(m:Category) RETURN n,r,m LIMIT 2000


MATCH (c:Category)--(p:Product)
RETURN c.id, count(p)

MATCH (c:Category)--(p:Product)
RETURN c.id,  count(p) as productCount
ORDER BY productCount DESC

OPTIONAL MATCH (c:Category)-[r]-(p:Product)
WHERE c.id =~ '(?i).*'+$name+'.*' OR p.name=~ '(?i).*'+$name+'.*' OR p.description=~ '(?i).*'+$name+'.*'
RETURN c,r,p


MATCH (c:Category)-[r]-(p:Product)
WHERE p.rating > 4
RETURN c.id,  count(p) as productCount
ORDER BY productCount DESC


MATCH (c:Category)--(p:Product)
RETURN p.rating as ratings, count(*)
ORDER BY ratings DESC



BLOOM - Saved Cyphers
=====================

***** Search product or categories for $name

OPTIONAL MATCH (c:Category)-[r]-(p:Product)
WHERE c.id =~ '(?i).*'+$name+'.*' OR p.name=~ '(?i).*'+$name+'.*' OR p.description=~ '(?i).*'+$name+'.*'
RETURN c,r,p

***** Show the best rated products

MATCH (c:Category)--(p:Product)
RETURN p.rating as ratings, count(*)
ORDER BY ratings DESC

MATCH (c:Category)-[r]-(p:Product)
WHERE p.ratings >= 4
RETURN c,r,p

MATCH (c:Category)-[r:PART_OF]-+(c:Category)<-[s:BELONGS_TO]-(p:Product WHERE p.rating > 4)
RETURN c,p,count(p)

MATCH (mc:Category)-[r:PART_OF]-+(c:Category)
CALL {
    WITH c
    MATCH (c)<-[s:BELONGS_TO]-(p:Product)
    RETURN p,s
    LIMIT 10
}
RETURN mc,c,r,p,s

*** CLEAN UP MODEL

OPTIONAL MATCH (n:Territory)-[r]-(m:Region)
OPTIONAL MATCH (n:Territory)-[s]-(o:Supplier)
RETURN n,r,s,m,o


OPTIONAL MATCH (n:Territory)-[r]-(m:Region)
OPTIONAL MATCH (n:Territory)-[s]-(o:Supplier)
DETACH DELETE n, m, o

OPTIONAL MATCH (c:Collection) WHERE c.id=~ '(?i).*Birthday.*'
DETACH DELETE c

"Birthday"
"A list of all products than can be gifted for a birthday"

OPTIONAL MATCH (c:Collection {id: 'Birthday'})
RETURN c

OPTIONAL MATCH (p:Product) WHERE p.openai_vector IS NULL
RETURN p



OPTIONAL MATCH (n:Shipper)-[r]-(o:Order)
DETACH DELETE n, o

MATCH (n:Customer)
DETACH DELETE n

MATCH (n:Employee)
DETACH DELETE n

MATCH (n:Supplier)
DETACH DELETE n

******* For graph visualization

OPTIONAL MATCH (c:Category)-[r]-(sc:Category)-[s]-(p:Product)
RETURN c,sc,r,count(p) as productCount
ORDER BY productCount DESC


MATCH (c:Category{id: "Winter Wear"})-[r]-(p:Product)
RETURN c,r,p LIMIT 2000


******* For saving embeddings

CALL db.index.vector.createNodeIndex('openai_vectors', 'Product', 'openai_vector', 1536, 'cosine')
SHOW INDEXES YIELD name, type, labelsOrTypes, properties, options WHERE type = 'VECTOR'

MATCH (n:Product {id: $id})
CALL db.create.setVectorProperty(n, 'propertyKey', $vector)
YIELD node RETURN node;

MATCH (p:Product {id: 'TKPFCZ9EA7H5FYZH'})
CALL db.create.setVectorProperty(p, 'openai_vector', [0.004228630103170872,0.024979250505566597])
YIELD p RETURN p;

MATCH (p:Product)
WHERE p.openai_vector IS NOT NULL
RETURN count(p) as productsWithVector

SHOW PROCEDURES YIELD name, signature
WHERE name = 'apoc.ml.query'
RETURN signature

MATCH (p:Product)
WHERE p.openai_vector IS NOT NULL
RETURN count(p) as productsWithVectors


MATCH (c:Collection{id: 'Birthday'})-[p:PART_OF]-+(cc:Collection)
RETURN c, p, cc
